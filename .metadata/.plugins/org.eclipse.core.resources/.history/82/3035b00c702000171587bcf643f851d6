package AppServer.System;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import AppDB.GroceryDB;
import AppDB.LoginDB;
import AppDB.Recipe;
import AppDB.RecipeDB;
import AppServer.MessageParser;
import AppServer.Netwok.SendString;

public class RecipeSystem extends AppSystem {

	protected static final String GETALL_RECIPE = "GetAll";
	protected static final String SEARCH_RECIPE = "Search";
	protected static final String REGISTER = "Register";
	
	protected String[] mMsg;
	protected DataInputStream mDIS;
	protected DataOutputStream mDOS;
	
	protected RecipeDB mRecipeDB;
	
	//------------------------------protected_method-----------------------------------------
	/*-------------------------------------------------------------------
	 * GetAll - MSG FORMAT
	 * "Recipe"///"GetAll"
	 * 
	 * Result - FORMAT
	 * "Start"///recipeId///recipeName///"End"
	 * 
	 ------------------------------------------------------------------*/
	protected void getAll() throws SQLException, IOException{
		ArrayList<String> result = new ArrayList<String>();
		ArrayList<String> tmp = new ArrayList<String>();
		String sendStr;
		
		tmp = mRecipeDB.getAllRecipeIdNameList();
		
		int tmpSize = tmp.size()/2;
		int index[] = new int[tmpSize];
		
		for(int i=0;i<tmpSize;i++)
			index[i]=i;
		
		int index1, index2;
		int tmpInt;
		for(int i=0;i<300;i++){
			index1 = (int)(Math.random()*tmpSize);
			index2 = (int)(Math.random()*tmpSize);
			
			tmpInt = index[index1];
			index[index1] = index[index2];
			index[index2] = tmpInt;
		}
		
		result.add("Start");
		for(int i=0;i<40;i++) {
			result.add(tmp.get(index[i]*2));
			result.add(tmp.get(index[i]*2+1));
		}
		result.add("End");
		
		sendStr = MessageParser.wrapMsg(result);
		SendString.sendString(sendStr, mDOS);
		
		System.out.println("레시피 전달");
	}
	/*-------------------------------------------------------------------
	 * Search - MSG FORMAT
	 * "Recipe"///"Search"///keyword(String)
	 * 
	 * Result - FORMAT
	 * "Start"///recipeId///recipeName///"End"
	 * 
	 ------------------------------------------------------------------*/	
	protected void search() throws SQLException, IOException{
		ArrayList<String> result = new ArrayList<String>();
		ArrayList<String> tmp;
		String sendStr;

		result.add("Start");
		
		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.id, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);

		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.recipename, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);
		
		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.countryname, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);

		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.categoryname, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);
		
/*		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.time, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);

		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.calories, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);

		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.amount, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);

		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.level, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);

		tmp = mRecipeDB.getRecipesInfoByKeyword(RecipeDB.recipeKeyword.price, mMsg[2]);
		if(tmp.size() != 0)
			result.addAll(tmp);*/
		result.add("End");
		
		sendStr = MessageParser.wrapMsg(result);
		SendString.sendString(sendStr, mDOS);
	}
	/*-------------------------------------------------------------------
	 * Register - MSG FORMAT
	 * "Recipe"///"GetInfo"///ID(String)
	 * 
	 * Result - FORMAT
	 * 
	 * 
	 ------------------------------------------------------------------*/	
	protected void register() throws SQLException, IOException{
		Recipe recipe = mRecipeDB.getRecipeInfoByID(mMsg[2]);
		
		ArrayList<String> result = new ArrayList<String>();
		String sendStr;
		
/*		if(mLoginDB.isExistUserID(mMsg[2]) == true){
			//이미 이쓴 ID
			result.add("Fail");
			result.add("ExistID");			
		}
		else {
			mLoginDB.registerUser(mMsg[2], mMsg[3]);
			result.add("Success");
			System.out.println("사용자 추가 완료");
		}*/
		
		sendStr = MessageParser.wrapMsg(result);
		SendString.sendString(sendStr, mDOS);
	}
	//-------------------------------public_method-------------------------------------------
	public RecipeSystem(String[] msg, DataInputStream dis, DataOutputStream dos) throws SQLException{
		mMsg = msg;
		mDIS = dis;
		mDOS = dos;
		mRecipeDB = GroceryDB.getRecipeDB();
	}

	public void excuteSystem() throws SQLException, IOException {
		if(mMsg[1].compareTo(RecipeSystem.GETALL_RECIPE)==0)
			getAll();
		else if(mMsg[1].compareTo(RecipeSystem.SEARCH_RECIPE)==0)
			search();
//		else if(mMsg[1].compareTo(LoginSystem.REGISTER)==0)
//			register();
		else 
			;
	}
}
